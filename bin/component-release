#!/usr/bin/env node

var Q = require('q');
var fs = require('fs');
var jsup = require('jsup');

var exists = fs.existsSync;

function readJSON(name) {
  if (!exists(name)) return null;
  else return JSON.parse(fs.readFileSync(name).toString().trim());
}
function editJSON(name, prop, value) {
  try {
    var dat = jsup(fs.readFileSync(name).toString().trim());
    dat.set([prop], value);
    fs.writeFileSync(name, dat.stringify());
  } catch (ex) {
    var json = readJSON(name);
    json[prop] = value;
    fs.writeFileSync(name, JSON.stringify(json, null, '  '));
  }
}

var winSpawn = require('win-spawn');
function spawn(cmd, args, options) {
  var def = Q.defer();
  var proc = winSpawn(cmd, args, options);
  proc.on('exit', function (code) {
    if (code !== 0) def.reject(new Error(cmd + ' exited with code ' + code));
    else def.resolve(null);
  });
  return def.promise;
}

var version = process.argv[2];

function greaterThan(a, b) {
  var regex = /^(\d+)\.(\d+)\.(\d+)$/;
  a = regex.exec(a);
  a = [+a[1], +a[2], +a[3]];
  b = regex.exec(b);
  b = [+b[1], +b[2], +b[3]];
  return a[0] > b[0] || (a[0] == b[0] && (a[1] > b[1] || (a[1] == b[1] && a[2] > b[2])));
}
function getMaxVersion(cb) {
  require('child_process').exec('git tag', function (err, res) {
    if (err) return cb(err);
    var max = '0.0.0';
    var hasVersion = false;
    res.toString()
      .split('\n')
      .forEach(function (v) {
        v = v.trim();
        if (/^\d+\.\d+\.\d+$/.test(v)) {
          hasVersion = true;
          if (greaterThan(v, max)) {
            max = v;
          }
        }
      });
    cb(null, hasVersion ? max : null);
  });
}
var com = readJSON('./component.json');
var npm = readJSON('./package.json');

if (/^\d+\.\d+\.\d+$/.test(version)) {
  getMaxVersion(function (err, max) {
    if (err) throw err;
    if (max && (greaterThan(max, version) || max == version)) {
      console.error('Can\'t create version ' + version + ' because version ' + max + ' already exists.');
      process.exit(1);
    } else {
      newVersion();
    }
  });
} else if (version) {
  console.error(version + ' does not match the expression `/^\\d+\\.\\d+\\.\\d+$/`');
  process.exit(1);
} else {
  getMaxVersion(function (err, max) {
    if (err) throw err;
    console.log('The current max-version is ' + max);
  });
}

function newVersion() {
  if (com && com.version != version) {
    if (npm && npm.version == version && greaterThan(npm.version, com.version)) {
      editJSON('./component.json', 'version', version);
      com.version = version;
    }
  }
  if (npm && npm.version != version) {
    if (com && com.version == version && greaterThan(com.version, npm.version)) {
      editJSON('./package.json', 'version', version);
      npm.version = version;
    }
  }
  if (com && com.version > version) {
    console.error('The version specified is less than the version in component.json');
  }
  if (npm && npm.version > version) {
    console.error('The version specified is less than the version in package.json');
  }
  if (!((com && com.version > version) || (npm && npm.version > version))) {
    if (!((com && com.version != version)||(npm && npm.version != version))) {
      doUpdate();
    } else {
      var readline = require('readline');

      var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      var updating = [];
      if (com && com.version != version) updating.push('component.json');
      if (npm && npm.version != version) updating.push('package.json');

      rl.question("Update versions in " + updating.join(' and ') + " to " + version +"?(yes)", 
        function(answer) {
          rl.close();
          if (answer && answer != 'yes') {
            console.error('Versions were out of date');
          } else {
            updating.forEach(function (name) {
              editJSON('./' + name, 'version', version);
            });
            if (npm) npm.version = version;
            if (com) com.version = version;
            doUpdate();
          }
        });
    }
  } else {
    process.exit(1);
  }
}
function doUpdate() {
  if (com && com.version != version) {
    console.error('component.json must have the correct version');
  }
  if (npm && npm.version != version) {
    console.error('package.json must have the correct version');
  }
  if ((com && com.version != version) || (npm && npm.version != version)) {
    process.exit(1);
  }
  var commands = [];
  if (npm && npm.private != true) {
    commands.push(['npm', ['publish']]);
  }
  commands.push(['git', ['commit','-a', '-m', 'Release ' + version]]);
  commands.push(['git', ['tag', version, '-a', '-m', version]]);
  commands.push(['git', ['push']]);
  commands.push(['git', ['push','--tags']]);

  var prom = Q.resolve();
  commands.forEach(function (command) {
    prom = prom.then(function () {
      console.log('\n\nexec: ' + command[0] + ' ' + command[1].join(' ') + '\n\n');
      return spawn(command[0], command[1], {stdio: 'inherit'});
    });
  });
  prom
    .then(function () {
      console.log('\n\nPublish complete');
    })
    .done();
}